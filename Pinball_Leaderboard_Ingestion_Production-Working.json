{
  "name": "Pinball Leaderboard Ingestion (Production - Working)",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -304,
        256
      ],
      "name": "Schedule Every 10 Minutes",
      "id": "8823cdcd-3791-4566-ab16-897d0c53beb9"
    },
    {
      "parameters": {
        "url": "https://api.prd.sternpinball.io/api/v1/portal/leaderboards/?event_code=hJjW-WXu-oCGQ&event_state=current&format=json",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -96,
        256
      ],
      "name": "Fetch Stern API Data",
      "id": "aa5e839f-6a33-43ae-b02d-903536db12db"
    },
    {
      "parameters": {
        "jsCode": "// Extract Event Metadata\nconst rawResponse = $input.first().json;\nconst leaderboard = rawResponse.leaderboard || {};\nconst fetchedAt = new Date().toISOString();\n\nconst metadata = {\n  event_code: leaderboard.code || 'hJjW-WXu-oCGQ',\n  event_name: leaderboard.name || 'Unknown Event',\n  start_date: leaderboard.start_date || null,\n  stop_date: leaderboard.stop_date || null,\n  fetched_at: fetchedAt,\n  raw_response: rawResponse\n};\n\nreturn [{ json: metadata }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        144
      ],
      "name": "Extract Event Metadata",
      "id": "3ec72aaa-8aad-4b6d-9fe0-4cf659135771"
    },
    {
      "parameters": {
        "jsCode": "// Extract and Structure Scores\nconst rawResponse = $input.first().json;\nconst leaderboard = rawResponse.leaderboard || {};\nconst fetchedAt = new Date().toISOString();\nconst eventCode = leaderboard.code || 'hJjW-WXu-oCGQ';\n\n// Extract arrays\nconst titles = Array.isArray(leaderboard.titles) ? leaderboard.titles : [];\nconst scores = Array.isArray(leaderboard.scores) ? leaderboard.scores : [];\n\n// Create machine map\nconst machineMap = {};\ntitles.forEach(title => {\n  machineMap[title.title_name] = title.title_code;\n});\n\n// Structure scores\nconst output = scores.map(score => ({\n  player_id: score.username,\n  machine_id: machineMap[score.title_name],\n  high_score: score.score,\n  date_set: fetchedAt,\n  event_code: eventCode,\n  score_source: 'API',\n  is_approved: true,\n  display_name: score.username,\n  initials: score.initials,\n  avatar_url: score.avatar_path,\n  background_color_hex: score.background_color_hex,\n  is_all_access: score.is_all_accesss || false,\n  title_name: score.title_name\n}));\n\nreturn output.map(s => ({ json: s }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        384
      ],
      "name": "Extract Score Data",
      "id": "638019e1-07f4-4480-99a2-fcf6bce112a3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO Events (\n    event_code, \n    event_name, \n    start_date, \n    stop_date, \n    location_id,\n    event_type\n) VALUES (\n    $1,\n    $2,\n    $3::timestamp,\n    $4::timestamp,\n    '11440',\n    'STERN_LEAGUE'\n)\nON CONFLICT (event_code) \nDO UPDATE SET\n    event_name = EXCLUDED.event_name,\n    start_date = EXCLUDED.start_date,\n    stop_date = EXCLUDED.stop_date,\n    is_active = true;",
        "options": {
          "queryReplacement": "={{ [ $json.event_code, $json.event_name, $json.start_date, $json.stop_date ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        352,
        16
      ],
      "name": "Upsert Event Metadata",
      "id": "2cdd6f22-c3d9-44bb-ad03-fe4f0ab18c1e",
      "credentials": {
        "postgres": {
          "id": "cDet4ulNrQr7JVZq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "api_snapshots",
          "mode": "name",
          "cachedResultName": "api_snapshots"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "event_code": "={{ $json.event_code }}",
            "fetched_at": "={{ $json.fetched_at }}",
            "raw_response": "={{ JSON.stringify($json.raw_response) }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        352,
        144
      ],
      "name": "Archive API Snapshot",
      "id": "532ada39-03ed-467a-9a53-45eddc9cb88e",
      "credentials": {
        "postgres": {
          "id": "cDet4ulNrQr7JVZq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Upsert Player\nINSERT INTO Players (\n    player_id, \n    display_name, \n    avatar_url,\n    background_color_hex, \n    is_all_access,\n    last_seen\n) VALUES (\n    $1,\n    $2,\n    $3,\n    $4,\n    $5::boolean,\n    NOW()\n)\nON CONFLICT (player_id) \nDO UPDATE SET\n    display_name = EXCLUDED.display_name,\n    avatar_url = EXCLUDED.avatar_url,\n    background_color_hex = EXCLUDED.background_color_hex,\n    is_all_access = EXCLUDED.is_all_access,\n    last_seen = NOW();\n\n-- Upsert Machine\nINSERT INTO Machines (\n    machine_id,\n    machine_name,\n    is_active\n) VALUES (\n    $6,\n    $7,\n    true\n) \nON CONFLICT (machine_id) \nDO UPDATE SET\n    machine_name = EXCLUDED.machine_name,\n    is_active = true;\n\n-- Return the score data to pass to next node\nSELECT $1 as player_id, $6 as machine_id, $8::bigint as high_score, \n       $9 as date_set, $10 as event_code, 'API' as score_source, true as is_approved;",
        "options": {
          "queryReplacement": "={{ [ $json.player_id, $json.display_name, $json.avatar_url, $json.background_color_hex, $json.is_all_access, $json.machine_id, $json.title_name, $json.high_score, $json.date_set, $json.event_code ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        352,
        384
      ],
      "name": "Upsert Players and Machines",
      "id": "7abb614a-3743-4672-b48d-801ba2c3a544",
      "credentials": {
        "postgres": {
          "id": "cDet4ulNrQr7JVZq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Check if we should insert this score\n-- Returns row only if: (1) no score exists OR (2) new score is higher\nWITH existing AS (\n  SELECT MAX(high_score) as max_score\n  FROM High_Scores_Archive\n  WHERE player_id = $1\n    AND machine_id = $2\n    AND event_code = $5\n)\nSELECT \n  $1 as player_id,\n  $2 as machine_id,\n  $3::bigint as high_score,\n  $4 as date_set,\n  $5 as event_code,\n  $6 as score_source,\n  $7::boolean as is_approved\nFROM existing\nWHERE max_score IS NULL OR $3::bigint > max_score;",
        "options": {
          "queryReplacement": "={{ [ $json.player_id, $json.machine_id, $json.high_score, $json.date_set, $json.event_code, $json.score_source, $json.is_approved ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        576,
        384
      ],
      "name": "Check for Higher Score",
      "id": "7a1600c7-9467-4bab-a939-a018276744e7",
      "credentials": {
        "postgres": {
          "id": "cDet4ulNrQr7JVZq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "high_scores_archive",
          "mode": "name",
          "cachedResultName": "high_scores_archive"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "player_id": "={{ $json.player_id }}",
            "machine_id": "={{ $json.machine_id }}",
            "high_score": "={{ $json.high_score }}",
            "date_set": "={{ $json.date_set }}",
            "event_code": "={{ $json.event_code }}",
            "score_source": "={{ $json.score_source }}",
            "is_approved": "={{ $json.is_approved }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        800,
        384
      ],
      "name": "Insert New High Score",
      "id": "17f7fb61-9397-4768-9c27-769fd215d05f",
      "credentials": {
        "postgres": {
          "id": "cDet4ulNrQr7JVZq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1024,
        256
      ],
      "name": "Wait for Both Paths",
      "id": "784498aa-1e2f-45e6-8b5c-cdb780f57a2e"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH event_dates AS (\n    SELECT start_date, stop_date, event_code \n    FROM Events \n    WHERE event_code = $1\n)\nSELECT update_combined_leaderboard(\n    (SELECT start_date FROM event_dates),\n    (SELECT stop_date FROM event_dates),\n    (SELECT event_code FROM event_dates)\n);",
        "options": {
          "queryReplacement": "=={{ [ $('Upsert Event Metadata').first().json.event_code ] }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1232,
        256
      ],
      "name": "Recalculate Leaderboard",
      "id": "f207107f-7766-4230-bc34-2e599d7c7b73",
      "credentials": {
        "postgres": {
          "id": "cDet4ulNrQr7JVZq",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://your-frontend-webhook.example.com/api/leaderboard-updated",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1456,
        256
      ],
      "name": "Notify Frontend",
      "id": "de1ee58e-7791-44bd-a3cf-6329478931d7",
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Every 10 Minutes": {
      "main": [
        [
          {
            "node": "Fetch Stern API Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Stern API Data": {
      "main": [
        [
          {
            "node": "Extract Event Metadata",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract Score Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Event Metadata": {
      "main": [
        [
          {
            "node": "Upsert Event Metadata",
            "type": "main",
            "index": 0
          },
          {
            "node": "Archive API Snapshot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Score Data": {
      "main": [
        [
          {
            "node": "Upsert Players and Machines",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Event Metadata": {
      "main": [
        [
          {
            "node": "Wait for Both Paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upsert Players and Machines": {
      "main": [
        [
          {
            "node": "Check for Higher Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for Higher Score": {
      "main": [
        [
          {
            "node": "Insert New High Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert New High Score": {
      "main": [
        [
          {
            "node": "Wait for Both Paths",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Wait for Both Paths": {
      "main": [
        [
          {
            "node": "Recalculate Leaderboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recalculate Leaderboard": {
      "main": [
        [
          {
            "node": "Notify Frontend",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1e17e48c-2a66-4b5b-b273-a544e6fa6bfe",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "100235c335eb882bd7dc4dc3e300e2d9d5c5fc73acdec7489046f5d3aa6adf7f"
  },
  "id": "VnPU9qg3kYOhI5pF",
  "tags": []
}